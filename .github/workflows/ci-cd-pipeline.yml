name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      # 3. Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Build avec Maven (nettoie et génère le fichier .jar)
      - name: Build avec Maven
        run: mvn clean install

      # 5. Exécuter les tests unitaires
      - name: Exécuter les tests unitaires
        run: mvn test -Dtest=**/*Test.java

      # 6. Attendre que la base de données soit prête
      - name: Attendre que la base de données soit prête
        run: |
          sleep 10 # Wait for PostgreSQL to start

      # 7. Exécuter les tests d'intégration
      - name: Exécuter les tests d'intégration
        run: mvn verify -DskipUnitTests -Dtest=**/*IntegrationTest.java

      # 8. Exécuter les tests end-to-end (si applicable)
      - name: Exécuter les tests E2E
        run: mvn verify -De2eTests -Dtest=**/*E2eTest.java

      # 9. Exécuter les tests de vulnérabilité
      - name: Exécuter OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check

      # 10. Exécuter le rapport Jacoco
      - name: Exécuter le rapport Jacoco
        run: mvn jacoco:report

      # 11. Construire l'image Docker avec le .jar généré
      - name: Build Docker Image
        run: |
          # Vérifie si le fichier .jar existe
          if [ ! -f target/*.jar ]; then
            echo "Le fichier .jar n'a pas été généré, arrêt du pipeline";
            exit 1;
          fi
          
          # Construire l'image Docker
          docker build -t my-app ./src/main/resources

      # 12. Pousser le code vers Render pour un déploiement automatique
      - name: Push code to Render
        if: github.ref == 'refs/heads/main'
        run: |
          git remote set-url origin https://github.com/${{ github.repository }}.git
          git add .
          git commit -m "Trigger Render deployment"
          git push origin main

        # 13. Scan SonarCloud (commenté si tu veux l'activer)
        # - name: Scan SonarCloud
        # env:
        #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # run: mvn verify sonar:sonar -Dsonar.projectKey=prod_logiciel -Dsonar.organization=ALEX67U -Dsonar.host.url=https://sonarcloud.io
